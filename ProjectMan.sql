CREATE OR REPLACE TRIGGER trg_set_default_task_status
BEFORE INSERT ON "TASKS"
FOR EACH ROW
BEGIN
    IF :NEW.STATUS IS NULL THEN
        :NEW.STATUS := 'Not Started';
    END IF;
END;

CREATE OR REPLACE TRIGGER trg_update_task
AFTER UPDATE OF STATUS ON PROJECTS
FOR EACH ROW
BEGIN
    IF :NEW.STATUS = 'Completed' THEN
        UPDATE TASKS
        SET STATUS = 'Completed'
        WHERE PROJECTID = :NEW.PROJECTID AND STATUS != 'Completed';
    END IF;
END;

CREATE OR REPLACE TRIGGER trg_delete_employee
AFTER DELETE ON EMPLOYEES
FOR EACH ROW
BEGIN
    -- Delete related accounts
    DELETE FROM ACCOUNTS
    WHERE EMPLOYEEID = :OLD.EMPLOYEEID;

    -- Delete related task assignments
    DELETE FROM TASKASSIGNMENTS
    WHERE EMPLOYEEID = :OLD.EMPLOYEEID;
END;

CREATE OR REPLACE TRIGGER trg_update_manager
AFTER INSERT ON PROJECTS
FOR EACH ROW
BEGIN
    UPDATE ACCOUNTS
    SET ROLE = 'Manager'
    WHERE EMPLOYEEID = :NEW.PROJECTMANAGERID;
END;

CREATE OR REPLACE TRIGGER TRG_LIMIT_EMPLOYEE_TASKS
FOR INSERT OR UPDATE ON TASKASSIGNMENTS
COMPOUND TRIGGER
   TYPE TaskCountMap IS TABLE OF NUMBER INDEX BY PLS_INTEGER;
   v_TaskCounts TaskCountMap;

   BEFORE EACH ROW IS
   BEGIN
      IF :NEW.EMPLOYEEID IS NOT NULL THEN
         IF v_TaskCounts.EXISTS(:NEW.EMPLOYEEID) THEN
            v_TaskCounts(:NEW.EMPLOYEEID) := v_TaskCounts(:NEW.EMPLOYEEID) + 1;
         ELSE
            SELECT COUNT(*) INTO v_TaskCounts(:NEW.EMPLOYEEID)
            FROM TASKASSIGNMENTS
            WHERE EMPLOYEEID = :NEW.EMPLOYEEID;
            v_TaskCounts(:NEW.EMPLOYEEID) := v_TaskCounts(:NEW.EMPLOYEEID) + 1;
         END IF;

         IF v_TaskCounts(:NEW.EMPLOYEEID) > 3 THEN
            RAISE_APPLICATION_ERROR(-20001, 'An employee cannot be assigned to more than 3 tasks.');
         END IF;
      END IF;
   END BEFORE EACH ROW;
END TRG_LIMIT_EMPLOYEE_TASKS;

/

-- Sequence cho bảng ACCOUNTS
CREATE SEQUENCE SEQ_ACCOUNTID
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Sequence cho bảng EMPLOYEES
CREATE SEQUENCE SEQ_EMPLOYEEID
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Sequence cho bảng PROJECTS
CREATE SEQUENCE SEQ_PROJECTID
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Sequence cho bảng TASKS
CREATE SEQUENCE SEQ_TASKID
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Sequence cho bảng TASKASSIGNMENTS
CREATE SEQUENCE SEQ_TASKASSIGNMENTID
START WITH 1
INCREMENT BY 1
NOCACHE;

-- Procedure for ACCOUNTS Table
CREATE OR REPLACE PROCEDURE PROC_INSERT_ACCOUNT (
    p_ACCOUNTID OUT NUMBER,
    p_USERNAME IN VARCHAR2,
    p_PASSWORDHASH IN VARCHAR2,
    p_EMAIL IN VARCHAR2,
    p_ROLE IN VARCHAR2,
    p_EMPLOYEEID IN NUMBER
) AS
BEGIN
    p_ACCOUNTID := SEQ_ACCOUNTID.NEXTVAL; 
    INSERT INTO ACCOUNTS (ACCOUNTID, USERNAME, PASSWORDHASH, EMAIL, ROLE, EMPLOYEEID)
    VALUES (p_ACCOUNTID, p_USERNAME, p_PASSWORDHASH, p_EMAIL, p_ROLE, p_EMPLOYEEID);
END;


CREATE OR REPLACE PROCEDURE PROC_UPDATE_ACCOUNT (
    p_ACCOUNTID IN NUMBER,
    p_USERNAME IN VARCHAR2,
    p_PASSWORDHASH IN VARCHAR2,
    p_EMAIL IN VARCHAR2,
    p_ROLE IN VARCHAR2,
    p_EMPLOYEEID IN NUMBER,
    p_SUCCESS OUT VARCHAR2
) AS
BEGIN
    UPDATE ACCOUNTS
    SET USERNAME = p_USERNAME,
        PASSWORDHASH = p_PASSWORDHASH,
        EMAIL = p_EMAIL,
        ROLE = p_ROLE,
        EMPLOYEEID = p_EMPLOYEEID
    WHERE ACCOUNTID = p_ACCOUNTID;

    IF SQL%ROWCOUNT > 0 THEN
        p_SUCCESS := 'SUCCESS';
    ELSE
        p_SUCCESS := 'FAIL';
    END IF;
END;


CREATE OR REPLACE PROCEDURE PROC_DELETE_ACCOUNT (
    p_ACCOUNTID IN NUMBER,
    p_SUCCESS OUT VARCHAR2
) AS
BEGIN
    DELETE FROM ACCOUNTS
    WHERE ACCOUNTID = p_ACCOUNTID;

    IF SQL%ROWCOUNT > 0 THEN
        p_SUCCESS := 'SUCCESS';
    ELSE
        p_SUCCESS := 'FAIL';
    END IF;
END;


CREATE OR REPLACE PROCEDURE PROC_SELECT_ACCOUNT (
    p_ACCOUNTID IN NUMBER,
    p_USERNAME OUT VARCHAR2,
    p_EMAIL OUT VARCHAR2,
    p_ROLE OUT VARCHAR2
) AS
BEGIN
    SELECT USERNAME, EMAIL, ROLE
    INTO p_USERNAME, p_EMAIL, p_ROLE
    FROM ACCOUNTS
    WHERE ACCOUNTID = p_ACCOUNTID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_USERNAME := NULL;
        p_EMAIL := NULL;
        p_ROLE := NULL;
END;


CREATE OR REPLACE PROCEDURE PROC_INSERT_EMPLOYEE (
    p_EMPLOYEEID OUT NUMBER,
    p_EMPLOYEENAME IN VARCHAR2,
    p_EMAIL IN VARCHAR2,
    p_DEPARTMENT IN VARCHAR2,
    p_JOBTITLE IN VARCHAR2
) AS
BEGIN
    p_EMPLOYEEID := SEQ_EMPLOYEEID.NEXTVAL; 
    INSERT INTO PROJECTMAN.EMPLOYEES (EMPLOYEEID, EMPLOYEENAME, EMAIL, DEPARTMENT, JOBTITLE)
    VALUES (p_EMPLOYEEID, p_EMPLOYEENAME, p_EMAIL, p_DEPARTMENT, p_JOBTITLE);
END;


CREATE OR REPLACE PROCEDURE PROC_UPDATE_EMPLOYEE (
    p_EMPLOYEEID IN NUMBER,
    p_EMPLOYEENAME IN VARCHAR2,
    p_EMAIL IN VARCHAR2,
    p_DEPARTMENT IN VARCHAR2,
    p_JOBTITLE IN VARCHAR2,
    p_SUCCESS OUT VARCHAR2
) AS
BEGIN
    UPDATE EMPLOYEES
    SET EMPLOYEENAME = p_EMPLOYEENAME,
        EMAIL = p_EMAIL,
        DEPARTMENT = p_DEPARTMENT,
        JOBTITLE = p_JOBTITLE
    WHERE EMPLOYEEID = p_EMPLOYEEID;

    IF SQL%ROWCOUNT > 0 THEN
        p_SUCCESS := 'SUCCESS';
    ELSE
        p_SUCCESS := 'FAIL';
    END IF;
END;


CREATE OR REPLACE PROCEDURE PROC_DELETE_EMPLOYEE (
    p_EMPLOYEEID IN NUMBER,
    p_SUCCESS OUT VARCHAR2
) AS
BEGIN
    DELETE FROM EMPLOYEES
    WHERE EMPLOYEEID = p_EMPLOYEEID;

    IF SQL%ROWCOUNT > 0 THEN
        p_SUCCESS := 'SUCCESS';
    ELSE
        p_SUCCESS := 'FAIL';
    END IF;
END;

rollback;

CREATE OR REPLACE PROCEDURE PROC_SELECT_EMPLOYEE (
    p_EMPLOYEEID IN NUMBER,
    p_EMPLOYEENAME OUT VARCHAR2,
    p_EMAIL OUT VARCHAR2,
    p_DEPARTMENT OUT VARCHAR2,
    p_JOBTITLE OUT VARCHAR2
) AS
BEGIN
    SELECT EMPLOYEEID, EMPLOYEENAME, EMAIL, DEPARTMENT, JOBTITLE
    INTO p_EMPLOYEEID, p_EMPLOYEENAME, p_EMAIL, p_DEPARTMENT, p_JOBTITLE
    FROM EMPLOYEES
    WHERE EMPLOYEEID = p_EMPLOYEEID;
EXCEPTION
    WHEN NO_DATA_FOUND THEN
        p_EMPLOYEENAME := NULL;
        p_EMAIL := NULL;
        p_DEPARTMENT := NULL;
        p_JOBTITLE := NULL;
END;



--Procedures for TASKS Table
CREATE OR REPLACE PROCEDURE PROC_INSERT_TASK (
    p_TASKID OUT NUMBER,
    p_TASKNAME IN VARCHAR2,
    p_TASKDESCRIPTION IN VARCHAR2,
    p_PROJECTID IN NUMBER,
    p_ASSIGNEEID OUT NUMBER,
    p_STATUS IN VARCHAR2,
    p_STARTDATE IN DATE,
    p_ENDDATE IN DATE,
    p_COMPLETIONPERCENTAGE IN NUMBER
) AS
BEGIN
    -- Get new assignment ID
    p_ASSIGNEEID := SEQ_TASKASSIGNMENTID.NEXTVAL; 
    INSERT INTO TaskAssignments (AssignmentID) 
    VALUES (p_ASSIGNEEID);
    
    -- Get new task ID and insert task
    p_TASKID := SEQ_TASKID.NEXTVAL;
    INSERT INTO TASKS (
        TASKID, TASKNAME, TASKDESCRIPTION, PROJECTID, 
        ASSIGNEEID, STATUS, STARTDATE, ENDDATE, COMPLETIONPERCENTAGE
    ) VALUES (
        p_TASKID, p_TASKNAME, p_TASKDESCRIPTION, p_PROJECTID, 
        p_ASSIGNEEID, p_STATUS, p_STARTDATE, p_ENDDATE, p_COMPLETIONPERCENTAGE
    );
    
    -- Update assignment with task ID
    UPDATE TaskAssignments 
    SET TaskID = p_TASKID 
    WHERE AssignmentID = p_ASSIGNEEID;
END;


CREATE OR REPLACE PROCEDURE PROC_UPDATE_TASK (
    p_TASKID IN NUMBER,
    p_TASKNAME IN VARCHAR2,
    p_TASKDESCRIPTION IN VARCHAR2,
    p_PROJECTID IN NUMBER,
    p_ASSIGNEEID IN NUMBER,
    p_STATUS IN VARCHAR2,
    p_STARTDATE IN DATE,
    p_ENDDATE IN DATE,
    p_COMPLETIONPERCENTAGE IN NUMBER
) AS
BEGIN
    UPDATE TASKS
    SET TASKNAME = p_TASKNAME,
        TASKDESCRIPTION = p_TASKDESCRIPTION,
        PROJECTID = p_PROJECTID,
        ASSIGNEEID = p_ASSIGNEEID,
        STATUS = p_STATUS,
        STARTDATE = p_STARTDATE,
        ENDDATE = p_ENDDATE,
        COMPLETIONPERCENTAGE = p_COMPLETIONPERCENTAGE
    WHERE TASKID = p_TASKID;
END;

CREATE OR REPLACE PROCEDURE PROC_DELETE_TASK (
    p_TASKID IN NUMBER
) AS
BEGIN
    DELETE FROM TASKASSIGNMENTS 
    WHERE TASKID = p_TASKID;

    DELETE FROM TASKS
    WHERE TASKID = p_TASKID;
END;


CREATE OR REPLACE PROCEDURE PROC_SELECT_TASK (
    p_TASKID IN NUMBER,
    p_CURSOR OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_CURSOR FOR
    SELECT * FROM TASKS
    WHERE TASKID = p_TASKID;
END;



--Procedures for TASKASSIGNMENTS Table
CREATE OR REPLACE PROCEDURE PROC_INSERT_TASKASSIGNMENT (
    p_ASSIGNMENTID IN NUMBER,  
    p_TASKID IN NUMBER,
    p_EMPLOYEEID IN NUMBER,
    p_ASSIGNEDDATE IN VARCHAR2,
    p_STATUS IN VARCHAR2
) AS
BEGIN
    UPDATE TASKASSIGNMENTS 
    SET EMPLOYEEID = p_EMPLOYEEID,
        ASSIGNEDDATE = p_ASSIGNEDDATE,
        STATUS = p_STATUS,
        TASKID = p_TASKID
    WHERE ASSIGNMENTID = p_ASSIGNMENTID;
END;


CREATE OR REPLACE PROCEDURE PROC_UPDATE_TASKASSIGNMENT (
    p_ASSIGNMENTID IN NUMBER,
    p_TASKID IN NUMBER,
    p_EMPLOYEEID IN NUMBER
) AS
BEGIN
    UPDATE TASKASSIGNMENTS
    SET TASKID = p_TASKID,
        EMPLOYEEID = p_EMPLOYEEID
    WHERE ASSIGNMENTID = p_ASSIGNMENTID;
END;


CREATE OR REPLACE PROCEDURE PROC_DELETE_TASKASSIGNMENT (
    p_ASSIGNMENTID IN NUMBER
) AS
BEGIN
    DELETE FROM TASKASSIGNMENTS
    WHERE ASSIGNMENTID = p_ASSIGNMENTID;
END;


CREATE OR REPLACE PROCEDURE PROC_SELECT_TASKASSIGNMENT (
    p_ASSIGNMENTID IN NUMBER,
    p_CURSOR OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_CURSOR FOR
    SELECT * FROM TASKASSIGNMENTS
    WHERE ASSIGNMENTID = p_ASSIGNMENTID;
END;

--Procedures for PROJECTS Table
CREATE OR REPLACE PROCEDURE PROC_INSERT_PROJECT (
    p_PROJECTID OUT NUMBER,
    p_PROJECTNAME IN VARCHAR2,
    p_STARTDATE IN DATE,
    p_ENDDATE IN DATE,
    p_STATUS IN VARCHAR2,
    p_PROJECTMANAGERID IN NUMBER
) AS
BEGIN
    p_PROJECTID := SEQ_PROJECTID.NEXTVAL; 
    INSERT INTO PROJECTS (PROJECTID, PROJECTNAME, STARTDATE, ENDDATE, STATUS, PROJECTMANAGERID)
    VALUES (p_PROJECTID, p_PROJECTNAME, p_STARTDATE, p_ENDDATE, p_STATUS, p_PROJECTMANAGERID);
END;

CREATE OR REPLACE PROCEDURE PROC_UPDATE_PROJECT (
    p_PROJECTID OUT NUMBER,
    p_PROJECTNAME IN VARCHAR2,
    p_STARTDATE IN DATE,
    p_ENDDATE IN DATE,
    p_STATUS IN VARCHAR2,
    p_PROJECTMANAGERID IN NUMBER
) AS
BEGIN
    UPDATE PROJECTS
    SET PROJECTNAME = p_PROJECTNAME,
        STARTDATE = p_STARTDATE,
        ENDDATE = p_ENDDATE,
        STATUS = p_STATUS,
        PROJECTMANAGERID = p_PROJECTMANAGERID
    WHERE PROJECTID = p_PROJECTID;
END;

CREATE OR REPLACE PROCEDURE PROC_DELETE_PROJECT (
    p_PROJECTID IN NUMBER
) AS
BEGIN
    -- Delete the project
    DELETE FROM PROJECTS
    WHERE PROJECTID = p_PROJECTID;
    
    COMMIT;
EXCEPTION
    WHEN OTHERS THEN
        ROLLBACK;
        RAISE;
END;

CREATE OR REPLACE PROCEDURE PROC_SELECT_PROJECT (
    p_PROJECTID IN NUMBER,
    p_CURSOR OUT SYS_REFCURSOR
) AS
BEGIN
    OPEN p_CURSOR FOR
    SELECT * FROM PROJECTS
    WHERE PROJECTID = p_PROJECTID;
END;

--FUNCTIONS
CREATE OR REPLACE FUNCTION FUNC_GET_PROJECT_NAME (
    p_PROJECTID IN NUMBER
) RETURN VARCHAR2 AS
    v_PROJECTNAME VARCHAR2(255);
BEGIN
    SELECT PROJECTNAME INTO v_PROJECTNAME
    FROM PROJECTS
    WHERE PROJECTID = p_PROJECTID;

    RETURN v_PROJECTNAME;
END;

CREATE OR REPLACE FUNCTION FUNC_GET_TASK_COUNT (
    p_PROJECTID IN NUMBER
) RETURN NUMBER AS
    v_TASKCOUNT NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_TASKCOUNT
    FROM TASKS
    WHERE PROJECTID = p_PROJECTID;

    RETURN v_TASKCOUNT;
END;



CREATE OR REPLACE PACKAGE PKG_PROJECT_MANAGEMENT AS
    -- Functions
    FUNCTION FUNC_GET_PROJECT_NAME (p_PROJECTID IN NUMBER) RETURN VARCHAR2;
    FUNCTION FUNC_GET_TASK_COUNT (p_PROJECTID IN NUMBER) RETURN NUMBER;

    -- Procedures
    PROCEDURE PROC_INSERT_PROJECT (
        p_PROJECTID OUT NUMBER,
        p_PROJECTNAME IN VARCHAR2,
        p_PROJECTDESCRIPTION IN VARCHAR2,
        p_STARTDATE IN DATE,
        p_ENDDATE IN DATE,
        p_STATUS IN VARCHAR2
    );

    PROCEDURE PROC_UPDATE_PROJECT (
        p_PROJECTID IN NUMBER,
        p_PROJECTNAME IN VARCHAR2,
        p_PROJECTDESCRIPTION IN VARCHAR2,
        p_STARTDATE IN DATE,
        p_ENDDATE IN DATE,
        p_STATUS IN VARCHAR2
    );

    PROCEDURE PROC_DELETE_PROJECT (p_PROJECTID IN NUMBER);

    PROCEDURE PROC_SELECT_PROJECT (
        p_PROJECTID IN NUMBER,
        p_CURSOR OUT SYS_REFCURSOR
    );
END PKG_PROJECT_MANAGEMENT;








